{"version":3,"sources":["utils/utils.js","components/NavBar.jsx","components/IntroPanel.jsx","components/ProjectPanel.jsx","components/WorksOverview.jsx","components/ProjectDetails.jsx","components/About.jsx","components/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["Utils","from","subject","message","callback","fetch","method","mode","headers","body","URLSearchParams","then","r","json","catch","e","response","projects","slug","this","fetchProjects","err","found","i","length","slugify","name","mediaDir","file","def","window","innerWidth","path","join","NavBar","props","state","isWorkDropdownShowing","workLink","React","createRef","generateWorkDropdown","bind","getDropdownOptions","calculateDropdownPlacement","div","document","querySelector","style","left","current","offsetLeft","top","offsetTop","offsetHeight","_this","console","log","setState","map","project","key","exact","to","activeClassName","isActive","match","location","pathname","includes","onresize","className","ref","onMouseEnter","visibility","dropdown","onPointerLeave","target","Component","withRouter","IntroPanel","shouldUpdateBackground","isActiveInView","Math","floor","scrollPosition","prevProps","prevState","snapshot","onPanelInView","ProjectPanel","renderLink","index","getResourcePath","media_dir","cover_video","WorksOverview","mainDiv","getPanelStyles","renderProjects","handleScroll","handleWheel","handlePanelInView","coverImage","scrollX","scrollLeft","getScreenWidth","event","scrollBy","deltaY","columns","forEach","gridTemplateColumns","onWheel","onScroll","ProjectDetails","params","fetchProjectBySlug","Helmet","content","property","notes","cover_image","subtitle","link","rel","href","src","youtube_video_id","frameBorder","allow","allowFullScreen","description_1","muted","autoPlay","loop","video2","description_2","About","about","video","fetchInfo","info","about_media_dir","about_bg","resume_path","onBackgroundLoaded","Contact","email","isSent","error","contactError","handleEmailChange","handleSubjectChange","handleBodyChange","handleSendClicked","value","preventDefault","display","sendEmail","success","htmlFor","type","onChange","onClick","App","backgroundVideo","handleProjectSelected","player","opacity","ontransitionend","id","render","Boolean","hostname","ReactDOM","hydrate","forceRefresh","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.732ffbb7.chunk.js","sourcesContent":["import slugify from \"slugify\";\nimport path from 'path';\n\nexport default class Utils {\n\n    static sendEmail(from, subject, message, callback) {\n\n        fetch('http://localhost:3002/email', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n            },\n            body: new URLSearchParams({\n                'from': from,\n                'subject': subject,\n                'message': message,\n            })\n        }).then((r) => {\n            return r.json();\n        }).then((r) => {\n            callback(null, r);\n        }).catch((e) => {\n            callback(e);\n        });\n    }\n\n    static fetchInfo(callback) {\n        fetch('/data/info.json')\n            .then(response => {\n                return response.json();\n            }).then(projects => {\n            if(callback) {\n                callback(null, projects);\n            }\n        }).catch(e => {\n            if(callback) {\n                callback(e);\n            }\n        });\n    }\n\n    static fetchProjects(callback) {\n        fetch('/data/projects.json')\n            .then(response => {\n                return response.json();\n            }).then(projects => {\n                if(callback) {\n                    callback(null, projects);\n                }\n            }).catch(e => {\n                if(callback) {\n                    callback(e);\n                }\n            });\n    }\n\n    static fetchProjectBySlug(slug, callback) {\n        this.fetchProjects((err, projects) => {\n            if(err) {\n                if(callback) {\n                    callback(err);\n                }\n            } else {\n                let found = null;\n                for(let i = 0; i < projects.length; i++) {\n                    if(slugify(projects[i].name) === slug) {\n                        found = projects[i];\n                        break;\n                    }\n                }\n                if(callback) {\n                    callback(null, found);\n                }\n            }\n        })\n    }\n\n    static getResourcePath(mediaDir, file) {\n        let width = window.innerWidth;\n        let def = width <= 960 ? 'lo' : 'hi';\n        let p = path.join(mediaDir, def, file);\n        return p;\n    }\n\n}\n","import React from 'react';\nimport './NavBar.css';\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport Utils from \"../utils/utils\";\nimport slugify from \"slugify\";\n\nclass NavBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isWorkDropdownShowing: false,\n            projects: [],\n        };\n\n        this.workLink = React.createRef();\n\n        this.generateWorkDropdown = this.generateWorkDropdown.bind(this);\n        this.getDropdownOptions = this.getDropdownOptions.bind(this);\n        this.calculateDropdownPlacement = this.calculateDropdownPlacement.bind(this);\n    }\n\n    calculateDropdownPlacement() {\n        let div = document.querySelector('.NavBar-dropdown');\n        div.style.left = `${this.workLink.current.offsetLeft}px`;\n        div.style.top = `${this.workLink.current.offsetTop + this.workLink.current.offsetHeight}px`;\n    }\n\n    generateWorkDropdown() {\n        this.calculateDropdownPlacement();\n\n        let _this = this;\n        Utils.fetchProjects((err, projects) => {\n            if(err) {\n                console.log(err);\n            } else {\n                _this.setState({\n                    projects: projects\n                });\n            }\n        });\n    }\n\n    getDropdownOptions() {\n        return this.state.projects.map((project) => {\n            let slug = slugify(project.name);\n            let path = `/projects/${slug}`;\n            return(\n                <div key={slug}>\n                    <NavLink exact to={path} activeClassName=\"NavBar-active\" isActive={(match, location) => {\n                        return location.pathname.includes(slug);\n                    }}>\n                        {project.name}\n                    </NavLink>\n                    <br/>\n                </div>\n            );\n        });\n    }\n\n    componentDidMount() {\n        this.generateWorkDropdown();\n        window.onresize = this.calculateDropdownPlacement;\n    }\n\n    render() {\n        return(\n            <div className=\"NavBar\">\n                <div/>\n                <div>\n                    <NavLink ref={this.workLink} exact to=\"/\" activeClassName=\"NavBar-active\" isActive={(match, location) => {\n                        return location.pathname === '/' || location.pathname.includes('projects');\n                    }} onMouseEnter={() => {\n                        if(!this.state.isWorkDropdownShowing) {\n                            this.setState({\n                                isWorkDropdownShowing: true,\n                            }, () => {\n                                let div = document.querySelector('.NavBar-dropdown');\n                                div.style.visibility = 'visible';\n                            });\n                        }\n                    }}>&nbsp;Work&nbsp;</NavLink>\n                    <NavLink exact to=\"/about\" activeClassName=\"NavBar-active\">&nbsp;About&nbsp;</NavLink>\n                    <NavLink exact to=\"/contact\" activeClassName=\"NavBar-active\">&nbsp;Contact&nbsp;</NavLink>\n                </div>\n                <div ref={this.dropdown} className=\"NavBar-dropdown\" onPointerLeave={(e) => {\n                    let div = document.querySelector('.NavBar-dropdown');\n                    if(this.state.isWorkDropdownShowing && e.target === div) {\n                        this.setState({\n                            isWorkDropdownShowing: false,\n                        }, () => {\n                            div.style.visibility = 'hidden';\n                        });\n                    }\n                }}>\n                    {this.getDropdownOptions()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(NavBar);\n","import React from 'react';\nimport './IntroPanel.css';\n\nexport default class IntroPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            shouldUpdateBackground: true,\n        };\n\n        this.isActiveInView = this.isActiveInView.bind(this);\n    }\n\n    isActiveInView() {\n        return Math.floor(this.props.scrollPosition) === 0;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.isActiveInView() && this.state.shouldUpdateBackground) {\n            let _this = this;\n            this.setState({\n                shouldUpdateBackground: false\n            }, () => {\n                if(_this.props.onPanelInView) {\n                    _this.props.onPanelInView(null);\n                }\n            });\n        } else if(!this.isActiveInView() && !this.state.shouldUpdateBackground) {\n            this.setState({\n                shouldUpdateBackground: true\n            });\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"IntroPanel\">\n                <h1><mark>Hi, I'm Allan <br/>and I'm a creative <br/>technologist.</mark></h1>\n                <span className=\"material-icons\">arrow_forward</span>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './ProjectPanel.css';\nimport {Link} from \"react-router-dom\";\nimport slugify from \"slugify\";\nimport Utils from \"../utils/utils\";\n\nexport default class ProjectPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            shouldUpdateBackground: true,\n        };\n\n        this.isActiveInView = this.isActiveInView.bind(this);\n        this.renderLink = this.renderLink.bind(this);\n    }\n\n    isActiveInView() {\n        return Math.floor(this.props.scrollPosition / this.props.index) === 1;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.isActiveInView() && this.state.shouldUpdateBackground) {\n            let _this = this;\n            this.setState({\n                shouldUpdateBackground: false\n            }, () => {\n                if(_this.props.onPanelInView) {\n                    _this.props.onPanelInView(Utils.getResourcePath(_this.props.project.media_dir, _this.props.project.cover_video));\n                }\n            });\n        } else if(!this.isActiveInView() && !this.state.shouldUpdateBackground) {\n            this.setState({\n                shouldUpdateBackground: true\n            });\n        }\n    }\n\n    renderLink() {\n        let slug = slugify(this.props.project.name);\n        return this.isActiveInView() ?\n            <Link to={`/projects/${slug}`}><h1>{this.props.project.name}</h1></Link> :\n            <span/>\n    }\n\n    render() {\n        return(\n            <div className=\"ProjectPanel\">\n                {this.renderLink()}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './WorksOverview.css';\nimport IntroPanel from \"./IntroPanel\";\nimport Utils from \"../utils/utils\";\nimport ProjectPanel from \"./ProjectPanel\";\n\nexport default class WorksOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projects: null,\n            scrollPosition: 0\n        };\n\n        this.mainDiv = React.createRef();\n\n        this.getPanelStyles = this.getPanelStyles.bind(this);\n        this.renderProjects = this.renderProjects.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleWheel = this.handleWheel.bind(this);\n        this.handlePanelInView = this.handlePanelInView.bind(this);\n    }\n\n    handlePanelInView(coverImage) {\n        if(this.props.onPanelInView) {\n            this.props.onPanelInView(coverImage);\n        }\n    }\n\n    getScreenWidth() {\n        return window.innerWidth;\n    }\n\n    getNumberPanels() {\n        return this.state.projects ? this.state.projects.length : 1;\n    }\n\n    handleScroll(e) {\n        let scrollX = e.target.scrollLeft + 40;\n        this.setState({\n            scrollPosition: scrollX / this.getScreenWidth(),\n        });\n    }\n\n    handleWheel(event) {\n        this.mainDiv.current.scrollBy(event.deltaY, 0);\n    }\n\n    componentDidMount() {\n        Utils.fetchProjects((err, projects) => {\n            if(err) {\n                console.log(err);\n            } else {\n                this.setState({\n                    projects: projects\n                });\n            }\n        });\n\n    }\n\n    getPanelStyles() {\n        let columns = '100vw';\n        if(this.state.projects) {\n            this.state.projects.forEach((project) => {\n                columns = `${columns} 100vw`;\n            })\n        }\n\n        columns = `${columns} 37.5vw`;\n\n        return {\n            gridTemplateColumns: columns,\n        }\n    }\n\n    renderProjects() {\n        let projects = this.state.projects ? this.state.projects : [];\n        return projects.map((project, key) => {\n            return(\n                <div className=\"WorksOverview-panel\" key={key}>\n                    <ProjectPanel onPanelInView={this.handlePanelInView} scrollPosition={this.state.scrollPosition} index={key + 1} project={project}/>\n                </div>\n            )\n        });\n    }\n\n    render() {\n        return(\n            <div ref={this.mainDiv} onWheel={this.handleWheel} onScroll={this.handleScroll} className=\"WorksOverview\" style={this.getPanelStyles()}>\n                <IntroPanel onPanelInView={this.handlePanelInView} scrollPosition={this.state.scrollPosition} index={0}/>\n                {this.renderProjects()}\n                <div/>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './ProjectDetails.css';\nimport slugify from \"slugify\";\nimport Utils from \"../utils/utils\";\nimport {Helmet} from \"react-helmet\";\n\nexport default class ProjectDetails extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projects: null,\n        };\n\n    }\n\n    componentDidMount() {\n        let slug = slugify(this.props.match.params.name);\n        Utils.fetchProjectBySlug(slug, (err, project) => {\n            if(err) {\n                console.log(err);\n            } else {\n                this.setState({\n                    project: project,\n                    slug: slug\n                });\n            }\n        });\n    }\n\n    render() {\n        if(this.state.project) {\n            return(\n                <div className=\"ProjectDetails\">\n                    <Helmet>\n                        <title>{`${this.state.project.name} - Allan Pichardo`}</title>\n                        <meta name=\"twitter:card\" content=\"summary\" />\n                        <meta name=\"twitter:site\" content=\"@allanpichardo\" />\n                        <meta name=\"twitter:creator\" content=\"@allanpichardo\" />\n                        <meta property=\"og:title\" content={`${this.state.project.name}`} />\n                        <meta property=\"og:type\" content=\"article\" />\n                        <meta property=\"og:url\" content={`https://www.allanpichardo.com/projects/${this.state.slug}`} />\n                        <meta property=\"og:description\" content={this.state.project.notes} />\n                        <meta property=\"og:image\" content={`https://www.allanpichardo.com${this.state.project.cover_image}`} />\n                    </Helmet>\n                    <div className=\"ProjectDetails-section\">\n                        <div className=\"ProjectDetails-title\">\n                            <h1><mark>{this.state.project.name}</mark></h1>\n                        </div>\n                        <div className=\"projectDetails-subtitle\">\n                            <h2><mark>{this.state.project.subtitle}</mark></h2>\n                            {\n                                this.state.project.link ?\n                                <h2><mark><a rel=\"noopener noreferrer\" target=\"_blank\" href={this.state.project.link}>{this.state.project.link}</a></mark></h2> :\n                                <span/>\n                            }\n                        </div>\n                        <div className=\"ProjectDetails-background1\"/>\n                        <div className=\"ProjectDetails-video1\">\n                            <div className=\"ProjectDetails-aspect-ratio\">\n                                <iframe src={`https://www.youtube.com/embed/${this.state.project.youtube_video_id}`}\n                                        frameBorder=\"0\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen>\n                                </iframe>\n                            </div>\n                        </div>\n                        <div className=\"ProjectDetails-description1\">\n                            <p><mark>{this.state.project.description_1}</mark></p>\n                        </div>\n                        <div className=\"ProjectDetails-background2\"/>\n                        <div className=\"ProjectDetails-video2\">\n                            <video muted={true} autoPlay={true} loop={true} src={Utils.getResourcePath(this.state.project.media_dir, this.state.project.video2)}/>\n                        </div>\n                        <div className=\"ProjectDetails-description2\">\n                            <p><mark>{this.state.project.description_2}</mark></p>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (<div/>);\n        }\n\n    }\n}\n","import React from 'react';\nimport './About.css';\nimport Utils from \"../utils/utils\";\n\nexport default class About extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            about: '',\n            video: '',\n        };\n    }\n\n    componentDidMount() {\n        let _this = this;\n        Utils.fetchInfo((err, info) => {\n            if(err) {\n                console.log(err);\n            } else {\n                _this.setState({\n                    about: info.about,\n                    video: Utils.getResourcePath(info.about_media_dir, info.about_bg),\n                    resume_path: info.resume_path,\n                }, () => {\n                    if(_this.props.onBackgroundLoaded) {\n                        _this.props.onBackgroundLoaded(this.state.video);\n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        return(\n            <div className=\"About\">\n                <div>\n                    <h1><mark>Allan Pichardo</mark></h1>\n                    <mark><a href={this.state.resume_path} target=\"_blank\">💾 Resume</a></mark>\n                </div>\n                <p><mark>{this.state.about}</mark></p>\n                <p/>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './Contact.css';\nimport Utils from \"../utils/utils\";\n\nexport default class Contact extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            subject: '',\n            body: '',\n            isSent: false,\n            error: ''\n        };\n\n        this.contactError = React.createRef();\n\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handleSubjectChange = this.handleSubjectChange.bind(this);\n        this.handleBodyChange = this.handleBodyChange.bind(this);\n        this.handleSendClicked = this.handleSendClicked.bind(this);\n    }\n\n    handleEmailChange(e) {\n        this.setState({\n            email: e.target.value\n        });\n    }\n\n    handleSubjectChange(e) {\n        this.setState({\n            subject: e.target.value\n        });\n    }\n\n    handleBodyChange(e) {\n        this.setState({\n            body: e.target.value\n        });\n    }\n\n    handleSendClicked(e) {\n        e.preventDefault();\n\n        this.contactError.current.style.display = 'none';\n\n        let _this = this;\n        Utils.sendEmail(\n            this.state.email,\n            this.state.subject,\n            this.state.body,\n            (err, info) => {\n                if(err) {\n                    _this.setState({\n                        isSent: false,\n                        error: err.message\n                    }, () => {\n                        _this.contactError.current.style.display = 'block';\n                        _this.contactError.current.style.visibility = 'visible';\n                    });\n                } else {\n                    _this.setState({\n                        isSent: info.success,\n                        error: info.message\n                    }, () => {\n                        if(!info.success) {\n                            _this.contactError.current.style.display = 'block';\n                            _this.contactError.current.style.visibility = 'visible';\n                        }\n                    });\n                }\n        });\n    }\n\n    isValid() {\n\n    }\n\n    render() {\n        return (\n            <div className=\"Contact\">\n                <div className=\"Contact-message\">\n                    <h1><mark>Let's get in touch</mark></h1>\n                </div>\n                <div className=\"Contact-form\">\n                    {!this.state.isSent ? <form>\n                        <label htmlFor=\"sender\"><mark>From</mark></label>\n                        <br/>\n                        <input type=\"email\" onChange={this.handleEmailChange}/>\n                        <br/><br/>\n                        <label htmlFor=\"sender\"><mark>Subject</mark></label>\n                        <br/>\n                        <input type=\"text\" onChange={this.handleSubjectChange}/>\n                        <br/><br/>\n                        <label htmlFor=\"subject\"><mark>Message</mark></label>\n                        <br/>\n                        <textarea onChange={this.handleBodyChange}/>\n                        <br/>\n                            <div className=\"Contact-error\" ref={this.contactError}>\n                                <p><mark>&nbsp;<span className=\"material-icons\">error_outline</span>&nbsp;Something went wrong:&nbsp;{this.state.error}</mark></p>\n                            </div>\n                        <br/>\n                        <button onClick={this.handleSendClicked}>&nbsp;Send!&nbsp;</button>\n                    </form> :\n                    <div className=\"Contact-success\">\n                        <h3>\n                            <mark>\n                                Message Sent!\n                            </mark>\n                        </h3>\n\n                    </div>\n                    }\n\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport WorksOverview from \"./components/WorksOverview\";\nimport ProjectDetails from \"./components/ProjectDetails\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.backgroundVideo = React.createRef();\n\n        this.handlePanelInView = this.handlePanelInView.bind(this);\n        this.handleProjectSelected = this.handleProjectSelected.bind(this);\n    }\n\n    handlePanelInView(video) {\n        console.log(video);\n        let player = this.backgroundVideo.current;\n        if(video) {\n            if(player.style.opacity > 0.0) {\n                player.style.opacity = 0.0;\n                player.ontransitionend = () => {\n                    player.style.opacity = 1.0;\n                    player.src = video;\n                    player.type = \"video/mp4\";\n                    player.ontransitionend = () => {\n\n                    }\n                };\n            } else {\n                player.src = video;\n                player.type = \"video/mp4\";\n                player.style.opacity = 1.0;\n            }\n        } else {\n            player.style.opacity = 0.0;\n            player.src = '';\n        }\n    }\n\n    handleProjectSelected() {\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\" id=\"mainView\">\n                <video className=\"App-video\" muted={true} loop={true} autoPlay={true} ref={this.backgroundVideo}/>\n                <div className=\"App-header\">\n                    <NavBar/>\n                </div>\n                <div className=\"App-body\">\n                    <Switch>\n                        <Route exact path=\"/\" render={(props) => {\n                            return <WorksOverview onPanelInView={this.handlePanelInView} {...props}/>\n                        }}/>\n                        <Route exact path=\"/about\" render={(props) => {\n                            return <About onBackgroundLoaded={this.handlePanelInView} {...props}/>\n                        }}/>\n                        <Route exact path=\"/contact\" render={(props) => {\n                            return <Contact {...props}/>\n                        }}/>\n                        <Route exact path=\"/projects/:name\" render={(props) => {\n                            return <ProjectDetails {...props}/>\n                        }}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.hydrate(\n    <BrowserRouter forceRefresh={true}>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}